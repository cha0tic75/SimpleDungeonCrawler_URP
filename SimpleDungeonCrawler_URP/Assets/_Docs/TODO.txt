TODO:

08/16/2022:
    - The game is split into 3 scenes:  StartScene, MenuScene, GamePlayScene.  All transitions are working great.
    - I created a new section 6 (Which can be the "boss" round)  I am thinking the player needs to survive in the 
      "Arena" for X seconds then a door will open and they can escape and win the game.
    - I added a concept of Enemy and scattered them around the world.
      NOTE: I still need to add them to Section 4, 5, and 6(Boss arena)


08/15/2022:
    - I implemented a main menu and changed PersistentObjects to GameManager that now holds the current state of the game.
      This required some refactoring.  For some reason when the game is "reset", not all objects are reset.
      
      I think a better approach would be to have 3 scenes: PersistentObjects, MainMenu, and GamePlay
      - PersistentObjects: This scene will be the first scene loaded and will hold persistent stuff.
                           (FadePanel, Camera, GameSceneManager* etc)
      - MainMenu:          This scene will basically just hold a MainMenuUI
      - GamePlay:          This will hold the Geometry, Player, Enemy, etc.
                            There will need to be a HealthMonitor system in this scene
                            that will tell the GameManager to switch states when they die!

      * GameSceneManager will be responsible for loading the appropriate scenes as well as scene transition 
        effects.


08/14/2022:
    - There seems to be a bug in the sprint mechanic.  I was able to still sprint, even after releasing the button.

    - Added some animations to the player to give a bit of juice to the game: Idle, Movement, DamageHealth, DamageStamina
      The 2 damage anims need to be simplified to 1.  If a damagedealer is dealing damage to both, the animation doesnt 
      really look that great(Since only one animation can be playing at 1x).

      No Handle Animations, I created a PlayerAnimatorController component.  The player controller passes the MovementInput.Mag
      to the SetMoveSpeed method in the PlayerAnimatorController component.  The take damage is handled by listening to events on
      the StatComponent.

08/13/2022:
    - I refactored the damage system and stat system to use referfences to StatType_SO.  This allows the damage system to apply damage
      to more than one stat.  However, this was done in the DamagableProviders.  Perhaps the DamageDealerHandlers should hold these 
      references and the DamagableProviders should just broadcast a IDamagable[] (or list). amd the DamageDealerHandlers can decide 
      what to do with them.

    - I created a minimap.


08/12/2022:

    - The BaseStatComponent needs some sort of means to test if it can regenerate(Besides not having any damage or not sprinting)
      IE: it would be cool to only allow the players health to regen if they are not moving:

    - Use Shader Graph to create a shader for the electric wall flicker.  This will cause the effect to 
      be handle on the GPU side rather than the CPU.

    - flesh out the rest of the level geometry and place the appropriate keys.
    - Create some concept of enemy. This can be as simple as a square that moves up and down 
      at regular intervals.